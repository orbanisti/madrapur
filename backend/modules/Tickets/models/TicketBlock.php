<?php

namespace backend\modules\Tickets\models;

use backend\modules\Modevent\models\Workshift;
use Yii;

/**
 * Default model for the `TicketBlock` module
 *
 * @property int $id [int(11)]
 * @property string $startId [varchar(8)]
 * @property int $assignedBy [int(11)]
 * @property int $assignedTo [int(11)]
 * @property bool $frozen [tinyint(1)]
 * @property int $timestamp [timestamp]
 */
class TicketBlock extends Tickets {

    /**
     * @return array
     */
    public function attributeLabels() {
        return [
            'startId' => Yii::t('app', 'Start ticket ID'),
        ];
    }

    /**
     * @return array|TicketBlockSearchModel|null|\yii\db\ActiveRecord
     */
    public static function userActiveTicketBlock(){

        $block = TicketBlockSearchModel::find()
            ->andFilterWhere(['=', 'assignedTo', Yii::$app->user->id])
            ->andWhere('isActive IS TRUE')
            ->one();
        return $block;
    }
    public static function userActiveTicketBlockId(){

        $block = TicketBlockSearchModel::find()
            ->andFilterWhere(['=', 'assignedTo', Yii::$app->user->id])
            ->andWhere('isActive IS TRUE')
            ->one();
        return $block->returnStartId();
    }

    public static function userNextTicketId(){
        $block = TicketBlockSearchModel::find()
            ->andFilterWhere(['=', 'assignedTo', Yii::$app->user->id])
            ->andWhere('isActive IS TRUE')
            ->one();
        return isset($block) ? $block->returnCurrentId() : 'Not set';

    }

    public static function userTicketBlocks(){
        $blocks=TicketBlockSearchModel::find()
            ->andFilterWhere(['=', 'assignedTo', Yii::$app->user->id])
            ->all();
        return $blocks;
    }

    public static function userWorkshiftSkippedTickets($workshiftId){
        $workshift=Workshift::findOne($workshiftId);

        $myTicketBlocks=TicketBlock::userTicketBlocks();
        Yii::warning($myTicketBlocks);
        $skippedTickets=[];
        $workshiftStart=date('Y-m-d', time()).' '.$workshift->startTime;
        $workshiftEnd=date('Y-m-d', time()).' '.$workshift->endTime;
        foreach($myTicketBlocks as $ticketBlock){

            $tickets = TicketSearchModel::useTable("modulus_tb_" . $ticketBlock->startId);

            $tickets = $tickets::find()
//                ->andFilterWhere(['between','timestamp',$workshiftStart,$workshiftEnd])
                ->andFilterWhere(['=','status','skipped'])
                ->all();

            foreach ($tickets as $ticket){

                $skippedTickets[]=$ticket->ticketId;
            }





        }
        return $skippedTickets;




    }

    public function afterFind() {
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

}
